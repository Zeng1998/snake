/**************************************************************************************************************
作者：
功能：贪吃蛇游戏
完成时间：
编译器：vs2015
**************************************************************************************************************/
#include <stdio.h>
#include <windows.h>
#include <time.h>

//游戏窗口
#define FrameX 4   //游戏窗口左上角的X轴坐标
#define FrameY 4   //游戏窗口左上角的Y轴坐标
#define Frame_height  25 //游戏窗口的高度
#define Frame_width   22 //游戏窗口的宽度

//定义全局变量
int i,j,s;
int a[2];     //用于记住蛇尾坐标，其中a[0]、a[1]分别表示横、竖坐标

  //声明蛇的结构体
struct Snake
{
	int x[100];    //蛇的横坐标，其中x[0]表示蛇尾的横坐标，x[length-1]表示蛇头的横坐标
	int y[100];    //蛇的竖坐标，其中y[0]表示蛇尾的竖坐标，y[length-1]表示蛇头的竖坐标
	int count;    //蛇吃食物的个数
	int length;    //蛇的长度
	int speed;    //蛇的速度
};

//声明食物的结构体
struct Food
{
	int x;     //食物的横坐标
	int y;     //食物的竖坐标
};

//声明函数
void Pos(int x, int y);
void Set_TextColor_Red(void);
void make_frame();
void over_game();
void init_snake(struct Snake *snake);
void print_snake(HANDLE hOut, struct Snake *snake);
void get_food(HANDLE hOut, struct Snake *snake, struct Food *food);
void eat_food(HANDLE hOut, struct Snake *snake, struct Food *food);
int if_die(struct Snake *snake);
void start_game();
void first_page();

/******光标移到指定位置**************************************************************/
void Pos(int x, int y)
{
	COORD pos;
	HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE);
	pos.X = x;
	pos.Y = y;
	SetConsoleCursorPosition(hOut, pos);
}
/******设置文本为红色*****************************************************************/
void Set_TextColor_Red(void)
{
	HANDLE Handle = GetStdHandle(STD_OUTPUT_HANDLE);

	SetConsoleTextAttribute(Handle, FOREGROUND_INTENSITY | FOREGROUND_RED);
}
/******制作游戏窗口******************************************************************/
void make_frame()
{
	for (i = 0; i < 25; i++)
	{
		for (j = 0; j < 22; j++)
		{
			if (0 == i || 24 == i || 0 == j || 21 == j)
			{
				printf("■");
				if (21 == j)
				{
					printf("\n");
				}
			}
			else
			{
				printf("  ");
			}
		}
	}
	Pos(55, 15);
	printf(" Esc退出");
	Pos(55, 20);
	printf(" Enter暂停");
	Set_TextColor_Red();        //设置蛇为红色
}

/******结束菜单*******************************************************************/
void over_game()
{
	Pos(0, 0);
	system("color 0F");
	for (i = 0; i < 25; i++)
	{
		for (j = 0; j < 22; j++)
		{
			printf("■");
			Sleep(5);
			if (21 == j)
			{
				printf("\n");
			}
		}
	}
	system("cls");
	printf("\n\n\n\n\n\n\n\n\t\t\t\t游戏结束\n\n\n");
	_getch();
}

/******菜单信息***************************************************************/
print_information(HANDLE hOut, struct Snake *snake, struct Food *food)
{
	Pos( 55,5);
	printf("等级 : %d", snake->count / 5 + 1);    //打印游戏等级
	Pos( 55,7);
	printf("得分 : %d", 10 * snake->count);    //打印游戏得分
	Pos(55,9);
	printf("速度 : 1/%dms", snake->speed);    //打印游戏速度
}

/******初始化蛇**********************************************************************/
void init_snake(struct Snake *snake)
{
	srand((unsigned)time(NULL));
	do
	{
		snake->x[0] = (rand() % (28 + (Frame_width - 22) * 2) + 2);    //初始化蛇的横坐标
		snake->y[0] = (rand() % (Frame_height - 2) + 1); //初始化蛇的竖坐标
	}while(0 != snake->x[0] % 2);   //保证蛇头和食物对齐
	if (1 == s)
	{
		snake->speed = 300;      //初始化蛇的速度为300ms
	}
	else if (2 == s)
	{
		snake->speed = 200;      //初始化蛇的速度为200ms
	}
	else
	{
		snake->speed = 100;      //初始化蛇的速度为100ms
	}
	snake->length = 3;      //初始化蛇的长度为3节
	snake->count = 0;       //初始化蛇吃的个数为0
	for (i = 1; i<snake->length; i++)
	{/* 依次得到蛇身、蛇头的坐标 */
		snake->x[i] = snake->x[i - 1] + 2;
		snake->y[i] = snake->y[i - 1];
	}
}

void first_page()     //欢迎页面
{
	char a[9][44] = {
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,1,1,0 },
		{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
	};
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 44; j++)
		{
			if (1 == a[i][j])
			{
				printf("■");
			}
			else
			{
				printf("  ");
				if (43 == j)
				{
					printf("\n");
				}
			}
		}
	}
	printf("\n\n\t\t请选择难度\n\n");
	printf("\t\t\t\t\t1.简单模式\n");
	printf("\t\t\t\t\t2.普通模式\n");
	printf("\t\t\t\t\t3.困难模式\n");
	printf("\n\n\t\t回车进入游戏\n");
	scanf_s("%d", &s);
	if ('\n' == getchar())
	{
		start_game();   //开始游戏
		return;
	}
}
/******移动蛇*************************************************************************/
void move_snake(HANDLE hOut, struct Snake *snake)
{
	Pos(snake->x[0], snake->y[0]);
	printf("  ");       /* 清除蛇尾*/
	for (i = 1; i<snake->length; i++)
	{/* 后一节的坐标依次取代前一节的坐标 */
		snake->x[i - 1] = snake->x[i];
		snake->y[i - 1] = snake->y[i];
	}
}

/******打印蛇*************************************************************************/
void print_snake(HANDLE hOut, struct Snake *snake)
{
	for (i = 0; i<snake->length; i++)
	{
		Pos(snake->x[i], snake->y[i]);
		if (i == 0)
		{
			printf("○");       //打印蛇尾
		}
		else if (i == snake->length - 1)
		{
			printf("¤");       //打印蛇头
		}
		else
		{
			printf("⊙");       //打印蛇身
		}
	}
}

/******随机产生食物*******************************************************************/
void get_food(HANDLE hOut, struct Snake *snake, struct Food *food)
{
	srand((unsigned)time(NULL));       //初始化随机数
	while (1)
	{/* 产生食物的条件：1.在游戏窗口内 2.不在蛇的身上 */
		food->x =( rand() % (23+2*(22-Frame_width)))+4;
		food->y = (rand() % (Frame_height - 4) + 2);

		for (i = 0; i<snake->length; i++)
		{/* 判断食物是否在蛇的身上，如果在蛇身上，则重新产生；否则，打印蛇身 */
			if (food->x == snake->x[i] && food->y == snake->y[i])
			{
				break;
			}
			if (0 != food->x % 2)                 //保证蛇头和食物对齐
			{
				break;
			}
		}
		if (i == snake->length)
		{
			Pos(food->x, food->y);
			printf("●");
			break;
		}
	}
}

/******吃食物***************************************************************************/
void eat_food(HANDLE hOut, struct Snake *snake, struct Food *food)
{
	if (snake->x[snake->length - 1] == food->x && snake->y[snake->length - 1] == food->y)
	{/* 如果蛇头位置与食物位置相同，吃食物 */
		snake->length++;      //吃一个食物，蛇身增长一节
		for (i = snake->length - 1; i >= 1; i--)
		{/* 蛇后节坐标依次赋值给蛇前一节的坐标，依次得到蛇身及蛇头的坐标 */
			snake->x[i] = snake->x[i - 1];
			snake->y[i] = snake->y[i - 1];
		}
		snake->x[0] = a[0];      //得到蛇尾移动前的横坐标
		snake->y[0] = a[1];      //得到蛇尾移动前的竖坐标
		get_food(hOut, snake, food);    //重新产生食物
		snake->count++;       //食物的个数增1
		if (snake->count % 5 == 0)
		{/* 当蛇吃Up_level个食物时，速度加快Up_speed毫秒并且升一级 */
			snake->speed -= 50;
		}
	}
}

/******判断蛇是否死**************************************************************************/
int if_die(struct Snake *snake)
{/* 当蛇头碰到自身时，蛇死 ，返回值为0 */
	for (i = 0; i<snake->length - 1; i++)
	{
		if (snake->x[snake->length - 1] == snake->x[i] && snake->y[snake->length - 1] == snake->y[i])
		{
			return 0;
		}
	}
	if (0== snake->x[snake->length - 1] || 0 == snake->y[snake->length - 1] || 42 == snake->x[snake->length - 1] || 24 == snake->y[snake->length - 1])
	{
		return 0;
	}
	return 1;
}

/******开始游戏*******************************************************************************/
void start_game()
{
	system("cls");
	unsigned char ch = 68;        //默认向右
	HANDLE hOut = GetStdHandle(STD_OUTPUT_HANDLE); //定义显示器句柄变量
	struct Snake s, *snake = &s;      //定义蛇的结构体指针并指向蛇的结构体
	struct Food f, *food = &f;       //定义食物的结构体指针并指向食物的结构体

	make_frame();         //制作游戏窗口
	init_snake(snake);        //初始化蛇
	get_food(hOut, snake, food);      //随机产生食物
	while (1)
	{
		print_information(hOut, snake, food);   //打印菜单信息
		a[0] = snake->x[0];       //记住蛇尾的横坐标
		a[1] = snake->y[0];       //记住蛇尾的竖坐标
		j = 0;
		if (_kbhit())
		{/* 判断是否按下键盘，如果按下，ch接收键盘输入 */
			ch = _getch();
		}
		switch (ch)
		{
		case 87:
		{/* 向上移动 */
			move_snake(hOut, snake);   //移动蛇
			snake->y[snake->length - 1] -= 1; //蛇头的竖坐标向上移，即减1
			break;
		}
		case 119:
		{/* 向上移动 */
			move_snake(hOut, snake);   //移动蛇
			snake->y[snake->length - 1] -= 1; //蛇头的竖坐标向上移，即减1
			break;
		}
		case 83:
		{/* 向下移动 */
			move_snake(hOut, snake);   //移动蛇
			snake->y[snake->length - 1] += 1; //蛇头的竖坐标向下移，即加1
			break;
		}
		case 115:
		{/* 向下移动 */
			move_snake(hOut, snake);   //移动蛇
			snake->y[snake->length - 1] += 1; //蛇头的竖坐标向下移，即加1
			break;
		}
		case 65:
		{/* 向左移动 */
			move_snake(hOut, snake);   //移动蛇
			snake->x[snake->length - 1] -= 2; //蛇头的横坐标向左移，即减2
			break;
		}
		case 97:
		{/* 向左移动 */
			move_snake(hOut, snake);   //移动蛇
			snake->x[snake->length - 1] -= 2; //蛇头的横坐标向左移，即减2
			break;
		}
		case 68:
		{/* 向右移动 */
			move_snake(hOut, snake);   //移动蛇
			snake->x[snake->length - 1] += 2; //蛇头的横坐标向右移，即加2
			break;
		}
		case 100:
		{/* 向右移动 */
			move_snake(hOut, snake);   //移动蛇
			snake->x[snake->length - 1] += 2; //蛇头的横坐标向右移，即加2
			break;
		}
		}
		eat_food(hOut, snake, food);     //吃食物
		print_snake(hOut, snake);     //打印蛇
		if (if_die(snake) == 0 || ch == 27  )
		{/* 游戏结束条件：1.蛇碰到自身 2.按Esc键 3.碰墙 */
			Pos( FrameX + Frame_width - 2, FrameY + Frame_height / 2 - 1);
			printf("Game Over");
			Sleep(200);
			break;
		}
			Sleep(snake->speed);      //延迟时间     即速度
	}
}
void main()
{
	system("color 0D");  //设置文本为紫色
	first_page();    //首页
	over_game();   //结束游戏
}
